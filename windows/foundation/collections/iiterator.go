// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package collections

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const GUIDIIterator string = "6a79e863-4300-459a-9966-cbb660963ee1"
const SignatureIIterator string = "{6a79e863-4300-459a-9966-cbb660963ee1}"

type IIterator struct {
	ole.IInspectable
}

type IIteratorVtbl struct {
	ole.IInspectableVtbl

	GetCurrent    uintptr
	GetHasCurrent uintptr
	MoveNext      uintptr
	GetMany       uintptr
}

func (v *IIterator) VTable() *IIteratorVtbl {
	return (*IIteratorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IIterator) GetCurrent() (unsafe.Pointer, error) {
	var out unsafe.Pointer
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCurrent,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out unsafe.Pointer
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IIterator) GetHasCurrent() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetHasCurrent,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *IIterator) MoveNext() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().MoveNext,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *IIterator) GetMany(itemsSize uint32) ([]unsafe.Pointer, uint32, error) {
	var items []unsafe.Pointer = make([]unsafe.Pointer, itemsSize)
	var out uint32
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetMany,
		uintptr(unsafe.Pointer(v)),         // this
		uintptr(itemsSize),                 // in uint32
		uintptr(unsafe.Pointer(&items[0])), // out unsafe.Pointer
		uintptr(unsafe.Pointer(&out)),      // out uint32
	)

	if hr != 0 {
		return nil, 0, ole.NewError(hr)
	}

	return items, out, nil
}
